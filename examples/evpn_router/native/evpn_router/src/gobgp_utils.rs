/* automatically generated by rust-bindgen */

extern crate libc;
use self::libc::{c_void, c_int, c_longlong, c_char, size_t};

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GoString_ {
    pub p: *const c_char,
    pub n: isize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf {
    pub value: *mut c_char,
    pub len: c_int,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct path_t {
    pub nlri: buf,
    pub path_attributes: *mut *mut buf,
    pub path_attributes_len: c_int,
    pub path_attributes_cap: c_int,
}

pub type path = path_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoInterface {
    pub t: *mut c_void,
    pub v: *mut c_void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoSlice {
    pub data: *mut c_void,
    pub len: c_longlong,
    pub cap: c_longlong,
}

#[link(name = "gobgp")]
extern {
    pub fn new_path() -> *mut path;

    pub fn free_path(arg1: *mut path);

    pub fn append_path_attribute(
        arg1: *mut path,
        arg2: c_int,
        arg3: *mut c_char,
    ) -> c_int;

    pub fn get_path_attribute(arg1: *mut path, arg2: c_int) -> *mut buf;

    pub fn get_route_family(p0: *mut String) -> u32;

    pub fn serialize_path(p0: u32, p1: *mut String) -> *mut path;

    pub fn decode_path(p0: *mut path) -> *mut c_char;

    pub fn decode_capabilities(p0: *mut buf) -> *mut c_char;
}
